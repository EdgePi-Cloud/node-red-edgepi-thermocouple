"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TcService = void 0;
const protobuf = __importStar(require("protobufjs"));
const RpcChannel_1 = require("../../rpcChannel/RpcChannel");
const SOCKETENDPOINT = 'ipc:///tmp/edgepi.pipe'; // Temporary
class TcService {
    constructor() {
        this.rpcProtoRoot = protobuf.loadSync(`${__dirname}../../../../protos/rpc.proto`);
        this.serviceProtoRoot = protobuf.loadSync(`${__dirname}../../../../protos/tc.proto`);
        this.serviceName = 'TcService';
        this.rpcChannel = new RpcChannel_1.RpcChannel(SOCKETENDPOINT, this.rpcProtoRoot);
        console.info(this.serviceName, "initialized");
    }
    callTempReadMethod(methodName) {
        return __awaiter(this, void 0, void 0, function* () {
            // Get types
            const requestType = this.serviceProtoRoot.lookupType('EdgePiRPC_TC.EmptyMsg');
            const responseType = this.serviceProtoRoot.lookupType('EdgePiRPC_TC.TempReading');
            // Create request
            const serviceReq = {
                serviceName: this.serviceName,
                methodName,
                requestMsg: { /* Empty Msg */}
            };
            // Call method through rpc
            console.debug("Sending temperature reading request through rpcChannel");
            const response = yield this.rpcChannel.callMethod(serviceReq, requestType, responseType);
            if (response.error !== undefined) {
                throw Error(response.error);
            }
            const tempReading = response.content;
            return [tempReading.cjTemp, tempReading.linTemp];
        });
    }
    singleSample() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.callTempReadMethod('single_sample');
        });
    }
    readTemperatures() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.callTempReadMethod('read_temperatures');
        });
    }
}
exports.TcService = TcService;
